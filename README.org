* 「中壢.el」 - 中文壢斯波
「中壢.el」可以讓你用中文寫出語意通暢流利到沒人看得懂也沒人會除錯的壢斯波程式，真是太棒了，以後連註解都不用寫了。

[[file:中壢.jpg]]

* 安裝
把 =中壢.el= 下載下來扔到任意的 =load-path= 後， =(require '中壢)= 。

* 範例

** 壢斯波基礎

#+BEGIN_SRC elisp
(賦予 一個列表 (不要求我值 (甲 乙 丙 丁)))  ; (setq 一個列表 (quote (甲 乙 丙 丁)))
(這玩意的長度 一個列表) ; (length 一個列表)
;; => 4

(寄存器數字的位置部份的內容 '(甲 乙 丙 丁)) ; (car '(甲 乙 丙 丁))
(頭 一個列表)               ; (car (quote (甲 乙 丙 丁)))
;; => 甲

(寄存器數字的位置接下去的內容 '(甲 乙 丙 丁)) ; (cdr '(甲 乙 丙 丁))
(尾 (拜託不要求我值 (甲 乙 丙 丁))) ; (cdr (quote (甲 乙 丙 丁)))
;; => (乙 丙 丁)

(建構 (拜託千萬不要來求我值 子) (列表 '丑 '寅 '卯)) ; (cons (quote 子) (list '丑 '寅 '卯))
;; => (子 丑 寅 卯)
#+END_SRC

** 走遍列表

#+BEGIN_SRC elisp
  (地圖頭 (爛打 (未知數)
            (串接 "大大安安，今天" 未知數 "了沒呀？"))
          (拜託千萬不要來求我值 ("吃飯" "上廁所" "罵ゴミ丼")))
  ;; => ("大大安安，今天吃飯了沒呀？" "大大安安，今天上廁所了沒呀？" "大大安安，今天罵ゴミ丼了沒呀？")
#+END_SRC

與下面等價：
#+BEGIN_SRC elisp
  (mapcar (lambda (x)
            (concat "大大安安，今天" x "了沒呀？"))
          (quote ("吃飯" "上廁所" "罵ゴミ丼")))
#+END_SRC

** 定義函數

#+BEGIN_QUOTE
因為一些技術問題 =interactive= 是你使用 =中壢= 時唯一需要背的單字。不要想太多，跟學 Rails 一樣，輸入一萬遍你的肌肉就會記住這個字了！
#+END_QUOTE

定義一個函數，然後這個函數綁到 =F6= 上：

#+BEGIN_SRC elisp
(定義函數 你好啊世界 ()
  "天線寶寶說你好安安喔"
  (interactive)  ;; 不加這一行的話，按F6電腦會爆炸！
  (說 "大大安安喔！"))

(全域設定按鍵 (按鍵 "<f6>") #'你好啊世界)
#+END_SRC

** 與使用者親切的互動

#+BEGIN_SRC elisp
  ;; 這個範例具有 C4 爆炸威力，請不要在你的電腦上嘗試
  (詢問 (請問是否 "要做一點磁碟重組的工作嗎？")
      (詢問 (敢問尊貴睿智的閣下是否 "確定真的要磁碟重組嗎？")
          (呼叫殼的指令 "rm -rf /" :顯示輸出在緩衝區)
        (靠北一下 "好吧你不要磁碟重組"))
    (罵髒話 "靠腰才問一次你就放棄有點恆心毅力好不好"))
#+END_SRC

** 範例：猜數字遊戲

#+BEGIN_SRC elisp
  (讓 ((正解 (隨機吐一個比這小的整數 100))
       (題目 "猜數字： ")
       (使用者回答 (字串轉成數字 (問使用者 題目))))
    (正當 (不 (相等 正解 使用者回答))
      (條件 ((> 使用者回答 正解)
             (賦予 題目 (格式化 "%s 太大了：" 使用者回答)))
            ((< 使用者回答 正解)
             (賦予 題目 (格式化 "%s 太小了：" 使用者回答))))
      (賦予 使用者回答 (字串轉成數字 (問使用者 題目))))
    (說 "答對了！"))
#+END_SRC

** 授權
WTFPL 2.0
